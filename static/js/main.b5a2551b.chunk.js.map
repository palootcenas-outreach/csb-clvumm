{"version":3,"sources":["Context.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","TilesTelemetryContext","react__WEBPACK_IMPORTED_MODULE_0__","n","React","createContext","currentTile","r","react__WEBPACK_IMPORTED_MODULE_0___default","react_dom__WEBPACK_IMPORTED_MODULE_1__","react_dom__WEBPACK_IMPORTED_MODULE_1___default","_Context__WEBPACK_IMPORTED_MODULE_2__","LoadableComponent","lazy","e","then","bind","Boundary","_ref","children","context","useContext","a","createElement","App","props","Provider","value","Suspense","fallback","Object","assign","ref","component","console","log","rootElement","document","getElementById","ReactDOM","render","sizeee"],"mappings":"uFAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,GAEaG,EAFbH,EAAAK,EAAAD,GAEqCE,EAAMC,cAAc,CACvDC,YAAa,4ECHfR,EAAAS,EAAAP,GAAA,IAAAE,EAAAJ,EAAA,GAAAU,EAAAV,EAAAK,EAAAD,GAAAO,EAAAX,EAAA,GAAAY,EAAAZ,EAAAK,EAAAM,GAAAE,EAAAb,EAAA,GAIMc,EAAoBR,IAAMS,KAAK,WACnC,OAAOf,EAAAgB,EAAA,GAAAC,KAAAjB,EAAAkB,KAAA,YAGHC,EAAW,SAAHC,GAAqB,IAAfC,EAAQD,EAARC,SACZC,EAAUhB,IAAMiB,WAAWpB,KACjC,OACEO,EAAAc,EAAAC,cAAA,WACGJ,EAAQ,IAAGC,EAAQd,cAK1B,SAASkB,EAAIC,GAKX,OACEjB,EAAAc,EAAAC,cAACZ,EAAA,EAAsBe,SAAQ,CAACC,MAAO,CAAErB,YAAa,SACpDE,EAAAc,EAAAC,cAACN,EAAQ,KACPT,EAAAc,EAAAC,cAACf,EAAAc,EAAMM,SAAQ,CAACC,SAAUrB,EAAAc,EAAAC,cAAA,uBACxBf,EAAAc,EAAAC,cAACX,EAAiBkB,OAAAC,OAAA,GAAKN,EAAK,CAAEO,IARtC,SAAmBC,GACjBC,QAAQC,IAAIF,UAchB,IAAMG,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAOhC,EAAAc,EAAAC,cAACC,EAAG,CAACiB,OAAO,UAAYL","file":"static/js/main.b5a2551b.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const TilesTelemetryContext = React.createContext({\n  currentTile: \"default\"\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { TilesTelemetryContext } from \"./Context\";\n\nconst LoadableComponent = React.lazy(() => {\n  return import(\"./Component\");\n});\n\nconst Boundary = ({ children }) => {\n  const context = React.useContext(TilesTelemetryContext);\n  return (\n    <div>\n      {children} {context.currentTile}\n    </div>\n  );\n};\n\nfunction App(props) {\n  function handleRef(component) {\n    console.log(component);\n  }\n\n  return (\n    <TilesTelemetryContext.Provider value={{ currentTile: \"palo\" }}>\n      <Boundary>\n        <React.Suspense fallback={<div>loading</div>}>\n          <LoadableComponent {...props} ref={handleRef} />\n        </React.Suspense>\n      </Boundary>\n    </TilesTelemetryContext.Provider>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App sizeee=\"small\" />, rootElement);\n"],"sourceRoot":""}